---
#- debug:
#    msg: System {{ inventory_hostname }} has uuid {{ ansible_product_uuid }}
#- debug:
#    msg: System {{ inventory_hostname }} has gateway {{ ansible_default_ipv4.gateway }}
#- debug:
#    msg: "DISK {{ zfsprep_root_disks }} "
#    msg: "1 {{ zfsprep_root_disks_by_id }} {{ zfsprep_data_disks_by_id  }}"
#zfsprep_target_disks: "{{ zfsprep_legacy_device_nodes | ternary(((zfsprep_root_disks + zfsprep_data_disks) | map('regex_replace', '(.*)', '/dev/\\g<1>') | list),(zfsprep_root_disks_by_id + zfsprep_data_disks_by_id)) }}"
#zfsprep_data_disks: []
#zfsprep_target_disks: "{{ zfsprep_legacy_device_nodes | ternary(((zfsprep_root_disks + zfsprep_data_disks) | map('regex_replace', '(.*)', '/dev/\\g<1>') | list),(zfsprep_root_disks_by_id + zfsprep_data_disks_by_id)) }}"
#- debug:
#    msg: "DISK target {{ zfsprep_target_disks }} "
#    msg: "{{ zfsprep_root_disks | map('extract', hostvars[inventory_hostname]['ansible_devices'], ['links', 'ids', 0]) | list | map('regex_replace', '(.*)', '/dev/disk/by-id/\\g<1>') | list }}"
#     msg: "{{ zfsprep_root_disks | map('extract', hostvars[inventory_hostname]['ansible_devices'], ['links', 'ids', 0]) | list | list }}"
- name: ensure live system has necessary packages installed
  apt:
    name: 
      - mdadm
      - debootstrap
    state: present
    update_cache: true
    cache_valid_time: 3600
#    upgrade: safe
#    update_cache: true
  become: true
  register: apt_out
- debug: var=apt_out
#- debug: var={{ apt_out.stdout.split('\n')[:-1] }}
#  with_items: 
#    - mdadm
#    - debootstrap
#    - gdisk
#    - zfs-initramfs
#    - dkms
#    - dpkg-dev
#    - zfs-dkms
#    - zfsutils-linux
- name: Necessary efi
  apt:
    name:
    state: present
  with_items: 
    - dosfstools
  when: zfsprep_crypt | default(false) | bool == true
#- debug:
#    msg: Eyt kell {{ zfsprep_root_disks_by_id }}
- name: forcibly zap disks
  shell: "sgdisk --zap-all {{ item }}"
  with_items:
    - "{{ zfsprep_root_disks_by_id }}"
- name: set up efi disk partitions
  shell: "sgdisk {{ zfsprep_partition_flags }} {{ item }}"
  with_items:
    - "{{ zfsprep_root_device_list }}"

- name: set up boot disk partitions
  shell: "sgdisk {{ zfsprep_cryptboot_partition_flags }} {{ item }}"
  with_items:
    - "{{ zfsprep_root_device_list }}"
- name: set up root disk partitions
  shell: "sgdisk {{ zfsprep_root_partition_flags }} {{ item }}"
  with_items:
    - "{{ zfsprep_root_device_list }}"
- name: print info disk
  shell: "sgdisk --print {{ item }}"
  register: r
  with_items:
    - "{{ zfsprep_root_disks_by_id }}"
- name: debug directory output
  debug:
    msg: "{{r.results|map(attribute='stdout_lines')|list}}"
- debug:
    msg: Partition list {{  zfsprep_root_device_list }}
- debug:
    msg: Partition flag {{  zfsprep_partition_flags }}

#- name: set up data disk partitions
#  shell: "sgdisk {{ zfsprep_data_partition_flags }} {{ item }}"
#  when: zfsprep_data_partitions | default(false) | bool == true
#  with_items:
#    - "{{ zfsprep_data_device_list }}"
#  when: zfsprep_data_partitions | default(false) | bool == true
- name: set up crypt devices
  shell: "echo -n {{ zfsprep_crypt_passphrase }} | zpool create {{ zfsprep_root_pool_opts | join(' ') }} {{ zfsprep_root_pool }} {{ zfsprep_root_pool_type }} {{ zfsprep_root_device_list }}{{ zfsprep_root_part_append }} -f"
  when: zfsprep_crypt | default(false) | bool == true
- name: create root dataset
  zfs:
    name: "{{ zfsprep_root_pool }}/ROOT"
    state: present
    extra_zfs_properties:
      canmount: off
      mountpoint: none
- name: create root fs
  zfs:
    name: "{{ zfsprep_root_pool }}/ROOT/ubuntu"
    state: present
    extra_zfs_properties:
      canmount: noauto
      mountpoint: /
- name: manually mount rpool/ROOT before creating other mountpoints
  shell: "zfs mount {{ zfsprep_root_pool }}/ROOT"
- name: create mountpoints in root pool
  zfs:
    name: "{{ item.name }}"
    state: present
    extra_zfs_properties:
      "{{ item.properties }}"
  with_items:
    - "{{ zfsprep_root_volumes }}"
- name: chmod 01777 /mnt/var/tmp
  file:
    path: /mnt/var/tmp
    mode: 01777
#- name: create data zpool
#  shell: "zpool create {{ zfsprep_data_pool_opts | join(' ') }} {{ zfsprep_data_pool }} {{ zfsprep_data_pool_type }} {{ (zfsprep_luks | default(false) | bool == true) | ternary(zfsprep_luks_data_names | map('regex_replace', '(.*)', '/dev/mapper/\\g<1>') | list, (zfsprep_data_partitions | ternary((zfsprep_data_device_list | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_data_part_append) | list),zfsprep_data_device_list))) | join(' ') }}"
#  when: zfsprep_data_disks | length > 0
#- name: create data dataset
#  zfs:
#    name: "{{ zfsprep_data_pool }}/data"
#    state: present
#    extra_zfs_properties:
#      mountpoint: /data
#  when: zfsprep_data_disks | length > 0
#- name: create md0 for LUKS
#  shell: "echo yes | mdadm --create /dev/md0 --level=1 --raid-devices={{ zfsprep_root_device_list | length }} {{ zfsprep_root_device_list | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_crypt_part_append) | list | join(' ') }}"
#  when: (zfsprep_root_device_list | length > 1) and (zfsprep_luks | default(false) | bool == true)
#  name: format and mount /mnt/boot for crypt/LUKS
#  shell: "mke2fs -t ext2 {{ item }} && mkdir /mnt/boot && mount {{ item }} /mnt/boot"
#  with_items:
#    - "{{ (zfsprep_root_device_list | length > 1) | ternary('/dev/md0', (zfsprep_root_device_list | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_crypt_part_append) | list).0) }}"
#  when: zfsprep_luks | default(false) | bool == true
- name: format and mount /mnt/boot for crypt
  shell: "mke2fs -t ext2 {{ item }} && mkdir /mnt/boot && mount {{ item }} /mnt/boot"
  with_items:
    - "{{ (zfsprep_root_device_list | length > 1) | (zfsprep_root_device_list | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_boot_part_append) | list).0 }}"
  when: zfsprep_crypt | default(false) | bool == true
- name: format and mount /mnt/boot/efi for crypt
  shell: "mke2fs -t ext2 {{ item }} && mkdir /mnt/boot/efi && mount {{ item }} /mnt/boot/efi"
  with_items:
    - "{{ (zfsprep_root_device_list | length > 1) | (zfsprep_root_device_list | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_efi_part_append) | list).0 }}"
  when: zfsprep_crypt | default(false) | bool == true
- name: run debootstrap and set devices=off for root pool
  shell: "debootstrap {{ zfsprep_ubuntu_release }} /mnt && zfs set devices=off {{ zfsprep_root_pool }}"
#- name: set devices=off for data pool
#  shell: "zfs set devices=off {{ zfsprep_data_pool }}"
#  when: zfsprep_data_disks | length > 0
- name: write /etc/hostname in chroot
  copy:
    content: "{{ zfsprep_hostname.short }}"
    dest: /mnt/etc/hostname
- name: write default network config in chroot
  template:
    src: network.j2
    dest: "/mnt/etc/netplan/{01-network.yaml"
- name: write /etc/apt/sources.list in chroot
  template:
    src: sources.j2
    dest: /mnt/etc/apt/sources.list
- name: add hostname entries to /etc/hosts in chroot
  lineinfile:
    line: "127.0.0.1 {{ zfsprep_hostname.short }} {{ zfsprep_hostname.long }}"
    path: /mnt/etc/hosts
    state: present
    insertbefore: BOF
- name: mount special filesystems for chroot
  shell: "mount --rbind {{ item }}"
  with_items:
    - /dev /mnt/dev
    - /proc /mnt/proc
    - /sys /mnt/sys
  args:
    warn: false
